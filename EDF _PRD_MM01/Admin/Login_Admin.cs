///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace EDF__PRD_MM01.Admin
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Login_Admin recording.
    /// </summary>
    [TestModule("50b2e095-56de-4151-ba90-e990a0e56211", ModuleType.Recording, 1)]
    public partial class Login_Admin : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::EDF__PRD_MM01.S2022_PRD_MM01_NON_DUPRepository repository.
        /// </summary>
        public static global::EDF__PRD_MM01.S2022_PRD_MM01_NON_DUPRepository repo = global::EDF__PRD_MM01.S2022_PRD_MM01_NON_DUPRepository.Instance;

        static Login_Admin instance = new Login_Admin();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Login_Admin()
        {
            varUsernameAdmin = "";
            varPasswordAdmin = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Login_Admin Instance
        {
            get { return instance; }
        }

#region Variables

        string _varPasswordAdmin;

        /// <summary>
        /// Gets or sets the value of variable varPasswordAdmin.
        /// </summary>
        [TestVariable("026aa9d1-e203-4eb9-b05f-2c7ec0eecc77")]
        public string varPasswordAdmin
        {
            get { return _varPasswordAdmin; }
            set { _varPasswordAdmin = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable varUsernameAdmin.
        /// </summary>
        [TestVariable("f4fdea5d-d1ef-4235-b834-0d78276ec709")]
        public string varUsernameAdmin
        {
            get { return repo.varUsernameAdmin; }
            set { repo.varUsernameAdmin = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{LControlKey down}{Akey}{LControlKey up}' with focus on 'Logon_Admin.txt_email'.", repo.Logon_Admin.txt_emailInfo, new RecordItemIndex(0));
            repo.Logon_Admin.txt_email.PressKeys("{LControlKey down}{Akey}{LControlKey up}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 300ms.", new RecordItemIndex(1));
            Delay.Duration(300, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$varUsernameAdmin' with focus on 'Logon_Admin.txt_email'.", repo.Logon_Admin.txt_emailInfo, new RecordItemIndex(2));
            repo.Logon_Admin.txt_email.PressKeys(varUsernameAdmin);
            Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Logon_Admin.btn_Continue' at Center.", repo.Logon_Admin.btn_ContinueInfo, new RecordItemIndex(3));
            //repo.Logon_Admin.btn_Continue.Click();
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(4));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$varPasswordAdmin' with focus on 'Logon_Admin.txt_Password'.", repo.Logon_Admin.txt_PasswordInfo, new RecordItemIndex(5));
            repo.Logon_Admin.txt_Password.PressKeys(varPasswordAdmin);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Logon_Admin.btn_LogOn' at Center.", repo.Logon_Admin.btn_LogOnInfo, new RecordItemIndex(6));
            repo.Logon_Admin.btn_LogOn.Click();
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
